// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RazorWithSQLiteApp.Data;

#nullable disable

namespace Wallet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250623030551_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Wallet.Models.PaymentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Recipientor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("SenderWalletId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("WalletId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("PaymentRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100.00m,
                            CreatedAt = new DateTime(2025, 6, 17, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Payment",
                            Recipientor = "net@gmail.com",
                            SenderWalletId = 0,
                            Status = "Pending",
                            WalletId = 1
                        });
                });

            modelBuilder.Entity("Wallet.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("WalletId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 125.00m,
                            Date = new DateTime(2025, 6, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Type = "Payment Received",
                            WalletId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = -89.99m,
                            Date = new DateTime(2025, 6, 16, 16, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Type = "Product Purchase",
                            WalletId = 1
                        });
                });

            modelBuilder.Entity("Wallet.Models.WalletBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 1234.56m,
                            Email = "kimsreng@gmail.com",
                            Name = "kimsreng",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 500.00m,
                            Email = "admin2@gmail.com",
                            Name = "admin",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Wallet.Models.PaymentRequest", b =>
                {
                    b.HasOne("Wallet.Models.WalletBalance", "Wallet")
                        .WithMany("PaymentRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Wallet.Models.Transaction", b =>
                {
                    b.HasOne("Wallet.Models.WalletBalance", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Wallet.Models.WalletBalance", b =>
                {
                    b.Navigation("PaymentRequests");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
