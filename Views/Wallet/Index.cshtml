@model Wallet.Models.WalletBalance
@{
    ViewData["Title"] = "My Wallet";
    var userId = ViewBag.UserId ?? 1; // Default to user ID 1 if not provided
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .fade-in {
            animation: fadeIn 0.5s;
        }
        @* @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        } *@
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @* @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        } *@
    </style>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold text-gray-800">My Wallet</h1>
            <div class="flex items-center space-x-4">
                <div class="text-sm text-gray-500">User ID: <span id="currentUserId">@userId</span></div>
                <div class="text-sm text-gray-500">Last updated: <span id="lastUpdated">Loading...</span></div>
                <button onclick="refreshData()" class="text-blue-600 hover:text-blue-800">
                    <span id="refreshIcon">üîÑ</span> Refresh
                </button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Balance Card -->
            <div class="bg-white rounded-xl shadow-md overflow-hidden lg:col-span-1">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="text-xl font-semibold text-gray-700">Balance</h2>
                        <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">Active</span>
                    </div>
                    <div class="text-4xl font-bold text-gray-900 mb-2" id="balance">Loading...</div>
                    <p class="text-gray-500">Available funds</p>
                    <div class="mt-6 grid grid-cols-2 gap-4">
                        <button onclick="openModal('addMoneyModal')" class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors">
                            Add Money
                        </button>
                        <button onclick="openModal('sendMoneyModal')" class="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition-colors">
                            Send Money
                        </button>
                    </div>
                </div>
            </div>

            <!-- Transactions -->
            <div class="bg-white rounded-xl shadow-md overflow-hidden lg:col-span-2">
                <div class="p-6">
                    <h2 class="text-xl font-semibold text-gray-700 mb-4">Recent Transactions</h2>
                    <div id="transactions" class="space-y-4">
                        <div class="text-center py-8 text-gray-500">
                            <div class="loading mx-auto mb-2"></div>
                            Loading transactions...
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Payment Requests Section -->
        <div class="mt-6 bg-white rounded-xl shadow-md overflow-hidden">
            <div class="p-6">
                <h2 class="text-xl font-semibold text-gray-700 mb-4">Payment Requests</h2>
                <div id="paymentRequests" class="space-y-4">
                    <div class="text-center py-8 text-gray-500">
                        <div class="loading mx-auto mb-2"></div>
                        Loading payment requests...
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Money Modal -->
    <div id="addMoneyModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg p-6 w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold">Add Money</h3>
                <button onclick="closeModal('addMoneyModal')" class="text-gray-500 hover:text-gray-700 text-2xl">√ó</button>
            </div>
            <div class="space-y-4">
                <div>
                    <label class="block text-gray-700 mb-2">Amount</label>
                    <input type="number" id="addAmount" step="0.01" min="0" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label class="block text-gray-700 mb-2">Payment Method</label>
                    <div class="grid grid-cols-3 gap-2">
                        <button onclick="selectPaymentMethod('card')" class="payment-method border rounded-lg p-3 hover:bg-gray-50">
                            <div class="text-center">
                                <div class="text-2xl mb-1">üí≥</div>
                                <div class="text-sm">Card</div>
                            </div>
                        </button>
                        <button onclick="selectPaymentMethod('bank')" class="payment-method border rounded-lg p-3 hover:bg-gray-50">
                            <div class="text-center">
                                <div class="text-2xl mb-1">üè¶</div>
                                <div class="text-sm">Bank</div>
                            </div>
                        </button>
                        <button onclick="selectPaymentMethod('paypal')" class="payment-method border rounded-lg p-3 hover:bg-gray-50">
                            <div class="text-center">
                                <div class="text-2xl mb-1">üîµ</div>
                                <div class="text-sm">PayPal</div>
                            </div>
                        </button>
                    </div>
                </div>
                <button onclick="addMoney()" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors">
                    Add Money
                </button>
            </div>
        </div>
    </div>

    <!-- Send Money Modal -->
    <div id="sendMoneyModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg p-6 w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold">Send Money</h3>
                <button onclick="closeModal('sendMoneyModal')" class="text-gray-500 hover:text-gray-700 text-2xl">√ó</button>
            </div>
            <div class="space-y-4">
                <div>
                    <label class="block text-gray-700 mb-2">Recipient (Email)</label>
                    <input type="text" id="recipient" placeholder="email@example.com" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label class="block text-gray-700 mb-2">Amount</label>
                    <input type="number" id="sendAmount" step="0.01" min="0" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label class="block text-gray-700 mb-2">Description (Optional)</label>
                    <input type="text" id="description" placeholder="What's this for?" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                </div>
                <button onclick="sendMoney()" class="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition-colors">
                    Send Money
                </button>
            </div>
        </div>
    </div>

    <script>
        const BASE_URL = 'https://wallet.ele-sale.shop';
        @* const BASE_URL = 'http://localhost:4005'; *@
        let walletData = null;
        let currentUserId = @userId;
        let selectedPaymentMethod = null;

        // Fetch wallet data from API
        async function fetchWalletData(userId) {
            try {
                const token = localStorage.getItem('token');
                @* if (!token) throw new Error('Please login to view wallet'); *@

                const response = await fetch(`${BASE_URL}/wallet/${userId}`, {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    if (response.status === 404) throw new Error('Wallet not found for this user');
                    if (response.status === 401) throw new Error('Unauthorized: Please login again');
                    throw new Error('Failed to fetch wallet data');
                }

                const data = await response.json();
                // Handle System.Text.Json $values for collections
                if (data.transactions && data.transactions.$values) data.transactions = data.transactions.$values;
                if (data.paymentRequests && data.paymentRequests.$values) data.paymentRequests = data.paymentRequests.$values;

                return data;
            } catch (error) {
                console.error('Error fetching wallet data:', error);
                throw error;
            }
        }

        // Load and display wallet data
        async function loadWalletData(userId) {
            try {
                showLoading();
                const data = await fetchWalletData(userId);
                if (data) {
                    walletData = data;
                    currentUserId = userId;
                    updateUI();
                }
            } catch (error) {
                showError(error.message);
            }
        }

        // Refresh current data
        async function refreshData() {
            const refreshIcon = document.getElementById('refreshIcon');
            refreshIcon.style.animation = 'spin 1s linear infinite';
            try {
                await loadWalletData(currentUserId);
            } finally {
                refreshIcon.style.animation = '';
            }
        }

        // Show loading state
        function showLoading() {
            document.getElementById('balance').innerHTML = '<div class="loading"></div>';
            document.getElementById('transactions').innerHTML = `
                <div class="text-center py-8 text-gray-500">
                    <div class="loading mx-auto mb-2"></div>
                    Loading transactions...
                </div>`;
            document.getElementById('paymentRequests').innerHTML = `
                <div class="text-center py-8 text-gray-500">
                    <div class="loading mx-auto mb-2"></div>
                    Loading payment requests...
                </div>`;
        }

        // Show error state
        function showError(message) {
            document.getElementById('balance').textContent = 'Error';
            document.getElementById('transactions').innerHTML = `
                <div class="text-center py-8 text-red-500">
                    <div class="text-2xl mb-2">‚ö†Ô∏è</div>
                    ${message}
                </div>`;
            document.getElementById('paymentRequests').innerHTML = `
                <div class="text-center py-8 text-red-500">
                    <div class="text-2xl mb-2">‚ö†Ô∏è</div>
                    ${message}
                </div>`;
            document.getElementById('lastUpdated').textContent = 'Error';
        }

        // Update UI with wallet data
        function updateUI() {
            if (!walletData) return;

            // Update balance
            document.getElementById('balance').textContent = `$${walletData.balance.toFixed(2)}`;
            document.getElementById('lastUpdated').textContent = new Date().toLocaleTimeString();
            document.getElementById('currentUserId').textContent = currentUserId.toString();

            // Update transactions
            const transactionsContainer = document.getElementById('transactions');
            if (walletData.transactions && walletData.transactions.length > 0) {
                transactionsContainer.innerHTML = walletData.transactions.map(tx => `
                    <div class="flex justify-between items-center p-4 border-b hover:bg-gray-50 fade-in">
                        <div>
                            <div class="font-medium">${tx.type}</div>
                            <div class="text-sm text-gray-500">${new Date(tx.createdAt).toLocaleString()}</div>
                        </div>
                        <div class="text-right">
                            <div class="${tx.amount > 0 ? 'text-green-600' : 'text-red-600'} font-medium">
                                ${tx.amount > 0 ? '+' : ''}$${Math.abs(tx.amount).toFixed(2)}
                            </div>
                        </div>
                    </div>
                `).join('');
            } else {
                transactionsContainer.innerHTML = `
                    <div class="text-center py-8 text-gray-500">
                        No transactions found
                    </div>`;
            }

            // Update payment requests
            const paymentRequestsContainer = document.getElementById('paymentRequests');
            if (walletData.paymentRequests && walletData.paymentRequests.length > 0) {
                paymentRequestsContainer.innerHTML = walletData.paymentRequests.map(pr => `
                    <div class="flex justify-between items-center p-4 border-b hover:bg-gray-50 fade-in">
                        <div>
                            <div class="font-medium">Payment Request</div>
                            <div class="text-sm text-gray-500">To: Wallet #${pr.recipientWalletId || 'Pending'}</div>
                            <div class="text-xs text-gray-400">${new Date(pr.createdAt).toLocaleString()}</div>
                        </div>
                        <div class="text-right">
                            <div class="font-medium text-blue-600">$${pr.amount.toFixed(2)}</div>
                            <div class="text-xs ${pr.status === 'Completed' ? 'text-green-500' : pr.status === 'Pending' ? 'text-yellow-500' : 'text-red-500'}">
                                ${pr.status}
                            </div>
                        </div>
                    </div>
                `).join('');
            } else {
                paymentRequestsContainer.innerHTML = `
                    <div class="text-center py-8 text-gray-500">
                        No payment requests found
                    </div>`;
            }
        }

        // Modal functions
        function openModal(id) {
            document.getElementById(id).classList.remove('hidden');
        }

        function closeModal(id) {
            document.getElementById(id).classList.add('hidden');
            if (id === 'addMoneyModal') {
                document.getElementById('addAmount').value = '';
                selectedPaymentMethod = null;
                document.querySelectorAll('.payment-method').forEach(el => el.classList.remove('border-blue-500', 'bg-blue-50'));
            } else if (id === 'sendMoneyModal') {
                document.getElementById('recipient').value = '';
                document.getElementById('sendAmount').value = '';
                document.getElementById('description').value = '';
            }
        }

        // Payment method selection
        function selectPaymentMethod(method) {
            selectedPaymentMethod = method;
            document.querySelectorAll('.payment-method').forEach(el => el.classList.remove('border-blue-500', 'bg-blue-50'));
            event.currentTarget.classList.add('border-blue-500', 'bg-blue-50');
        }

        // Add money to wallet
        async function addMoney() {
            const amount = parseFloat(document.getElementById('addAmount').value);
            if (!amount || amount <= 0) {
                alert('Please enter a valid amount');
                return;
            }
            if (!selectedPaymentMethod) {
                alert('Please select a payment method');
                return;
            }

            try {
                const token = localStorage.getItem('token');
                @* if (!token) throw new Error('Please login to add money'); *@

                const response = await fetch(`${BASE_URL}/wallet/add-money`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        userId: currentUserId,
                        amount: amount,
                        paymentMethod: "CreditCard"
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to add money');
                }

                const data = await response.json();
                @* alert(data.message || `Successfully added $${amount.toFixed(2)} to your wallet!`); *@
                closeModal('addMoneyModal');
                await refreshData();
            } catch (error) {
                console.error('Error adding money:', error);
                alert(error.message || 'Failed to add money. Please try again.');
            }
        }

        // Send money
        async function sendMoney() {
            const recipient = document.getElementById('recipient').value;
            const amount = parseFloat(document.getElementById('sendAmount').value);
            const description = document.getElementById('description').value;

            if (!recipient) {
                alert('Please enter a recipient');
                return;
            }
            if (!amount || amount <= 0) {
                alert('Please enter a valid amount');
                return;
            }

            try {
                const token = localStorage.getItem('token');
                @* if (!token) throw new Error('Please login to send money'); *@

                const response = await fetch(`${BASE_URL}/wallet/send-money`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        senderUserId: currentUserId,
                        Recipientor: recipient,
                        amount: amount,
                        description: description
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to send money');
                }

                const data = await response.json();
                alert(data.message || `Payment request sent to ${recipient} for $${amount.toFixed(2)}`);
                closeModal('sendMoneyModal');
                await refreshData();
            } catch (error) {
                console.error('Error sending money:', error);
                alert(error.message || 'Failed to send money. Please try again.');
            }
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            // Check if user is logged in
            const token = localStorage.getItem('token');
            @* if (!token) {
                alert('Please login to view your wallet');
                window.location.href = '/login'; // Redirect to login page
                return;
            } *@
            loadWalletData(currentUserId);

            // Close modal when clicking outside
            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('fixed')) {
                    const modalId = e.target.id;
                    if (modalId.includes('Modal')) closeModal(modalId);
                }
            });
        });
    </script>
</body>
</html>